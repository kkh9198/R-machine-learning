library(tidyverse)
install.packages('randomForest')
library(randomForest)
list.files()
load('Bank_DataSet.RDA')
set.seed(1234)

fit1<-randomForest(PersonalLoan~.,
                   trainSet,
                   ntree=1000,
                   mtry=3,
                   importance=TRUE,
                   do.trace =50,
                   keep.forest=TRUE)

fit2<-randomForest(PersonalLoan~.,
                   trainSet,
                   ntree=1000,
                   mtry=4,
                   importance=TRUE,
                   do.trace =50,
                   keep.forest=TRUE)

fit3<-randomForest(PersonalLoan~.,
                   trainSet,
                   ntree=1500,
                   mtry=4,
                   importance=TRUE,
                   do.trace =50,
                   keep.forest=TRUE)

print(fit1)
print(fit1$err.rate)
plot(fit1)

importance(fit1,type=1)
varImpPlot(fit1,type=1)

treesize(fit1,terminal = TRUE)

real<-testSet$PersonalLoan
pred1<-predict(fit1,testSet,type='response')
table(pred1,real)


prob1<-predict(fit1,testSet,type='vote')[,2]
head(prob1)

library(caret)
confusionMatrix(pred1,real,positive = '1')


library(MLmetrics)
F1_Score(y_true = real,y_pred = pred1,positive = '1')
library(pROC)
roc(response = real, predictor = prob1) %>%
  plot(main = 'ROC Curve', col = 'red', lty = 1)
auc(response = real, predictor = prob1)


list.files()
fitDT <- readRDS(file = 'DecisionTree.RDS')
pred0 <- predict(object = fitDT, newdata = testSet, type = 'class')
confusionMatrix(data = pred1, reference = real, positive = '1')
confusionMatrix(data = pred0, reference = real, positive = '1')
F1_Score(y_true = real, y_pred = pred1, positive = '1')
F1_Score(y_true = real, y_pred = pred0, positive = '1')
prob0 <- predict(object = fitDT, newdata = testSet, type = 'prob')[, 2]
roc(response = real, predictor = prob0) %>%
  plot(col = 'blue', lty = 2, add = TRUE)
auc(response = real, predictor = prob0)  


grid<-expand.grid(ntree=c(300,500,700,1000),
                  mtry=3:7,
                  error=NA)

#문자열 포맷팅 객체,문자열 연결
nn<-nrow(grid)
for(ii in 1:nn){
  ntree<-grid$ntree[ii]
  mtry<-grid$mtry[ii]
  disp<-str_glue('현재{ii}번째 행 실행 중! [ntree:{ntree},mtry:{mtry}]')
  cat(disp,'\n\n')
  
  set.seed(1234)
  
  fit<-randomForest(PersonalLoan~.,
                     trainSet,
                     ntree=ntree,
                     mtry=mtry)
  grid$error[ii]<-tail(fit$err.rate[,1],1)
  
  
}

plot(x=grid$error,type='b',pch=19,col='red',
     main='grid search result')
abline(h=min(grid$error),col='blue',lty=2)

loc<-which.min(grid$error)
bestPara<-grid[loc,]



set.seed(1234)

best<-randomForest(PersonalLoan~.,
                  trainSet,
                  ntree=bestPara$ntree,
                  mtry=bestPara$mtry,
                  importance=TRUE)

plot(best)
#변수의 중요도
importance(best,type=1)
varImpPlot(best,type=1)

boxplot(formula=Income ~ PersonalLoan, data=trainSet)


avg<-trainSet %>% group_by(PersonalLoan)%>%
  summarise(m=mean(Income))

points(formula=m~PersonalLoan,
       data=avg,pch=19,col='red',cex=1.2)


library(gmodels)
CrossTable(x=trainSet$Education, y=trainSet$PersonalLoan)


pred2 <- predict(object = best, newdata = testSet, type = 'response')
confusionMatrix(data = pred1, reference = real, positive = '1')
confusionMatrix(data = pred2, reference = real, positive = '1')
F1_Score(y_true = real, y_pred = pred1, positive = '1')
F1_Score(y_true = real, y_pred = pred2, positive = '1')


prob2 <- predict(object = best, newdata = testSet, type = 'prob')[, 2]
roc(response = real, predictor = prob0) %>%
  plot(col = 'blue', lty = 2, add = TRUE)
auc(response = real, predictor = prob0)
